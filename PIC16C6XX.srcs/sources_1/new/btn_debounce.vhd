----------------------------------------------------------------------------
--	btn_debounce.vhd -- Button Debouncer
----------------------------------------------------------------------------
-- Author:  Sam Bobrowicz
--          Copyright 2011 Digilent, Inc.
-- Modified: Added toggle output
----------------------------------------------------------------------------
--
----------------------------------------------------------------------------
-- This component is used to debounce signals generated by external push
-- buttons. It is designed to independently debounce a Push button signal.
-- Debouncing is done by only registering a change in a button state if 
-- it remains constant for the specified number of clock cycles. 
--         				
-- Port Descriptions:
--
--   clk  		- The input clock
--   input 		- The input button signal
--   output     - The debounced button output signal
--   toggle 	- The debounced toggle output signal									
----------------------------------------------------------------------------
--
----------------------------------------------------------------------------
-- Revision History:
--  08/08/2011 (SamB): Created using Xilinx Tools 13.2
--  10/06/2013   (CU): Converted to one button and added toggle output
--  05/19/2019 (Mike): Refactored/optimized from https://github.com/rauenzi/VHDL-Communications/blob/522ccea95e7f1ec41ed0b26fa6a8897a4768de74/btn_debounce_toggle.vhd
----------------------------------------------------------------------------
library IEEE;
use IEEE.STD_LOGIC_1164.ALL;
use IEEE.std_logic_unsigned.all;

-- TODO: reset logic
entity btn_debounce is
GENERIC (
	CONSTANT delay : integer := 65535);           -- the number of clock cycles to wait before asserting stable input (also the required delay between presses in order for it to register as a new press)
    Port ( clk 		  : in  STD_LOGIC;            -- the input clock
           input 	  : in  STD_LOGIC;            -- the input button signal
           output     : out  STD_LOGIC;           -- the debounced button output signal
           toggle     : inout  STD_LOGIC := '0'); -- the debounced toggle output signal
end btn_debounce;

architecture Behavioral of btn_debounce is
    
    signal counter   : integer range 0 to delay     := 0;
    signal debounced : std_logic   				    := '0';
    signal sync      : std_logic_vector(1 downto 0) := (others => '0');
begin

	process
	begin
	    wait until rising_edge(clk);
 
        -- counter for how many clocks the button state has remained unchanged after a change in input
        if (counter = delay or (not ((debounced = '1') xor (input = '1')))) then
            counter <= 0;
        else
            counter <= counter + 1;
        end if;

       -- debounce
        if (counter = delay) then
            debounced <= not(debounced);
        end if;
        
        -- toggle
        sync(0) <= debounced;
        sync(1) <= sync(0);
        if (not sync(1) and sync(0)) = '1' then
            toggle <= not toggle;
        end if;
	
	end process;
					  
	output <= debounced;

end Behavioral;